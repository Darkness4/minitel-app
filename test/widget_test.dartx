// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility that Flutter provides. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:auto_login_flutter/pages/reporting.dart';
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:auto_login_flutter/localizations.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:fake_async/fake_async.dart';

void main() {
  testWidgets('Save a diagnostic', (WidgetTester tester) async {
    const Key reportingKey = Key('reporting');
    const Key appKey = Key('app');
    const title = "test";
    const ReportingPage reportingPage = ReportingPage(
      title: title,
      key: reportingKey,
      channel: "DE8PA0Z1C",
    );
    Widget app1 = MaterialApp(
      key: appKey,
      localizationsDelegates: [
        const AppLocDelegate(),
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
      ],
      onGenerateTitle: (BuildContext context) => AppLoc.of(context).title,
      supportedLocales: [
        const Locale('en', ''), // English
        const Locale('fr', ''), // French
      ],
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: reportingPage,
    );

    await tester.pumpWidget(app1);
    await tester.pumpAndSettle();

    final StatefulElement innerElement =
        tester.element(find.byKey(reportingKey));
    final ReportingPageState innerElementState = innerElement.state;
    expect(innerElementState.widget, equals(reportingPage));

    await tester.enterText(find.byType(TextField).first, "Unit Test");
    await tester.enterText(find.byType(TextField).last, "Unit Test");
    await tester.pump();

    expect(find.byIcon(Icons.zoom_in), findsOneWidget);

    tester.binding.addTime(Duration(seconds: 130));

    await tester.tap(find.byIcon(Icons.zoom_in));
    await tester.runAsync(() async {
      await Future.delayed(Duration(seconds: 65));
    });
    await tester.pumpAndSettle();
    await tester.tap(find.byIcon(Icons.send));
  });
}
