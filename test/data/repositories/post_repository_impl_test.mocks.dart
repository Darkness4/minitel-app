// Mocks generated by Mockito 5.0.3 from annotations
// in minitel_toolbox/test/data/repositories/post_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:connectivity_platform_interface/src/enums.dart' as _i4;
import 'package:minitel_toolbox/core/network/network_info.dart' as _i2;
import 'package:minitel_toolbox/data/datasources/twitter/twitter_local_data_source.dart'
    as _i7;
import 'package:minitel_toolbox/data/datasources/twitter/twitter_remote_data_source.dart'
    as _i5;
import 'package:minitel_toolbox/domain/entities/twitter/post.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeUri extends _i1.Fake implements Uri {}

class _FakeDuration extends _i1.Fake implements Duration {}

class _FakeDateTime extends _i1.Fake implements DateTime {}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i2.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ConnectivityResult> get result =>
      (super.noSuchMethod(Invocation.getter(#result),
              returnValue: Future.value(_i4.ConnectivityResult.wifi))
          as _i3.Future<_i4.ConnectivityResult>);
}

/// A class which mocks [Uri].
///
/// See the documentation for Mockito's code generation for more information.
class MockUri extends _i1.Mock implements Uri {
  MockUri() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get scheme =>
      (super.noSuchMethod(Invocation.getter(#scheme), returnValue: '')
          as String);
  @override
  String get authority =>
      (super.noSuchMethod(Invocation.getter(#authority), returnValue: '')
          as String);
  @override
  String get userInfo =>
      (super.noSuchMethod(Invocation.getter(#userInfo), returnValue: '')
          as String);
  @override
  String get host =>
      (super.noSuchMethod(Invocation.getter(#host), returnValue: '') as String);
  @override
  int get port =>
      (super.noSuchMethod(Invocation.getter(#port), returnValue: 0) as int);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  String get query =>
      (super.noSuchMethod(Invocation.getter(#query), returnValue: '')
          as String);
  @override
  String get fragment =>
      (super.noSuchMethod(Invocation.getter(#fragment), returnValue: '')
          as String);
  @override
  List<String> get pathSegments =>
      (super.noSuchMethod(Invocation.getter(#pathSegments),
          returnValue: <String>[]) as List<String>);
  @override
  Map<String, String> get queryParameters =>
      (super.noSuchMethod(Invocation.getter(#queryParameters),
          returnValue: <String, String>{}) as Map<String, String>);
  @override
  Map<String, List<String>> get queryParametersAll =>
      (super.noSuchMethod(Invocation.getter(#queryParametersAll),
          returnValue: <String, List<String>>{}) as Map<String, List<String>>);
  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);
  @override
  bool get hasScheme =>
      (super.noSuchMethod(Invocation.getter(#hasScheme), returnValue: false)
          as bool);
  @override
  bool get hasAuthority =>
      (super.noSuchMethod(Invocation.getter(#hasAuthority), returnValue: false)
          as bool);
  @override
  bool get hasPort =>
      (super.noSuchMethod(Invocation.getter(#hasPort), returnValue: false)
          as bool);
  @override
  bool get hasQuery =>
      (super.noSuchMethod(Invocation.getter(#hasQuery), returnValue: false)
          as bool);
  @override
  bool get hasFragment =>
      (super.noSuchMethod(Invocation.getter(#hasFragment), returnValue: false)
          as bool);
  @override
  bool get hasEmptyPath =>
      (super.noSuchMethod(Invocation.getter(#hasEmptyPath), returnValue: false)
          as bool);
  @override
  bool get hasAbsolutePath => (super
          .noSuchMethod(Invocation.getter(#hasAbsolutePath), returnValue: false)
      as bool);
  @override
  String get origin =>
      (super.noSuchMethod(Invocation.getter(#origin), returnValue: '')
          as String);
  @override
  int get hashCode =>
      (super.noSuchMethod(Invocation.getter(#hashCode), returnValue: 0) as int);
  @override
  bool isScheme(String? scheme) =>
      (super.noSuchMethod(Invocation.method(#isScheme, [scheme]),
          returnValue: false) as bool);
  @override
  String toFilePath({bool? windows}) => (super.noSuchMethod(
      Invocation.method(#toFilePath, [], {#windows: windows}),
      returnValue: '') as String);
  @override
  bool operator ==(Object? other) =>
      (super.noSuchMethod(Invocation.method(#==, [other]), returnValue: false)
          as bool);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
  @override
  Uri replace(
          {String? scheme,
          String? userInfo,
          String? host,
          int? port,
          String? path,
          Iterable<String>? pathSegments,
          String? query,
          Map<String, dynamic>? queryParameters,
          String? fragment}) =>
      (super.noSuchMethod(
          Invocation.method(#replace, [], {
            #scheme: scheme,
            #userInfo: userInfo,
            #host: host,
            #port: port,
            #path: path,
            #pathSegments: pathSegments,
            #query: query,
            #queryParameters: queryParameters,
            #fragment: fragment
          }),
          returnValue: _FakeUri()) as Uri);
  @override
  Uri removeFragment() =>
      (super.noSuchMethod(Invocation.method(#removeFragment, []),
          returnValue: _FakeUri()) as Uri);
  @override
  Uri resolve(String? reference) =>
      (super.noSuchMethod(Invocation.method(#resolve, [reference]),
          returnValue: _FakeUri()) as Uri);
  @override
  Uri resolveUri(Uri? reference) =>
      (super.noSuchMethod(Invocation.method(#resolveUri, [reference]),
          returnValue: _FakeUri()) as Uri);
  @override
  Uri normalizePath() =>
      (super.noSuchMethod(Invocation.method(#normalizePath, []),
          returnValue: _FakeUri()) as Uri);
}

/// A class which mocks [DateTime].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateTime extends _i1.Mock implements DateTime {
  MockDateTime() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isUtc =>
      (super.noSuchMethod(Invocation.getter(#isUtc), returnValue: false)
          as bool);
  @override
  int get hashCode =>
      (super.noSuchMethod(Invocation.getter(#hashCode), returnValue: 0) as int);
  @override
  int get millisecondsSinceEpoch =>
      (super.noSuchMethod(Invocation.getter(#millisecondsSinceEpoch),
          returnValue: 0) as int);
  @override
  int get microsecondsSinceEpoch =>
      (super.noSuchMethod(Invocation.getter(#microsecondsSinceEpoch),
          returnValue: 0) as int);
  @override
  String get timeZoneName =>
      (super.noSuchMethod(Invocation.getter(#timeZoneName), returnValue: '')
          as String);
  @override
  Duration get timeZoneOffset =>
      (super.noSuchMethod(Invocation.getter(#timeZoneOffset),
          returnValue: _FakeDuration()) as Duration);
  @override
  int get year =>
      (super.noSuchMethod(Invocation.getter(#year), returnValue: 0) as int);
  @override
  int get month =>
      (super.noSuchMethod(Invocation.getter(#month), returnValue: 0) as int);
  @override
  int get day =>
      (super.noSuchMethod(Invocation.getter(#day), returnValue: 0) as int);
  @override
  int get hour =>
      (super.noSuchMethod(Invocation.getter(#hour), returnValue: 0) as int);
  @override
  int get minute =>
      (super.noSuchMethod(Invocation.getter(#minute), returnValue: 0) as int);
  @override
  int get second =>
      (super.noSuchMethod(Invocation.getter(#second), returnValue: 0) as int);
  @override
  int get millisecond =>
      (super.noSuchMethod(Invocation.getter(#millisecond), returnValue: 0)
          as int);
  @override
  int get microsecond =>
      (super.noSuchMethod(Invocation.getter(#microsecond), returnValue: 0)
          as int);
  @override
  int get weekday =>
      (super.noSuchMethod(Invocation.getter(#weekday), returnValue: 0) as int);
  @override
  bool operator ==(Object? other) =>
      (super.noSuchMethod(Invocation.method(#==, [other]), returnValue: false)
          as bool);
  @override
  bool isBefore(DateTime? other) =>
      (super.noSuchMethod(Invocation.method(#isBefore, [other]),
          returnValue: false) as bool);
  @override
  bool isAfter(DateTime? other) =>
      (super.noSuchMethod(Invocation.method(#isAfter, [other]),
          returnValue: false) as bool);
  @override
  bool isAtSameMomentAs(DateTime? other) =>
      (super.noSuchMethod(Invocation.method(#isAtSameMomentAs, [other]),
          returnValue: false) as bool);
  @override
  int compareTo(DateTime? other) => (super
          .noSuchMethod(Invocation.method(#compareTo, [other]), returnValue: 0)
      as int);
  @override
  DateTime toLocal() => (super.noSuchMethod(Invocation.method(#toLocal, []),
      returnValue: _FakeDateTime()) as DateTime);
  @override
  DateTime toUtc() => (super.noSuchMethod(Invocation.method(#toUtc, []),
      returnValue: _FakeDateTime()) as DateTime);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
  @override
  String toIso8601String() =>
      (super.noSuchMethod(Invocation.method(#toIso8601String, []),
          returnValue: '') as String);
  @override
  DateTime add(Duration? duration) =>
      (super.noSuchMethod(Invocation.method(#add, [duration]),
          returnValue: _FakeDateTime()) as DateTime);
  @override
  DateTime subtract(Duration? duration) =>
      (super.noSuchMethod(Invocation.method(#subtract, [duration]),
          returnValue: _FakeDateTime()) as DateTime);
  @override
  Duration difference(DateTime? other) =>
      (super.noSuchMethod(Invocation.method(#difference, [other]),
          returnValue: _FakeDuration()) as Duration);
}

/// A class which mocks [TwitterRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock
    implements _i5.TwitterRemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i6.Post>> fetchAllPosts() => (super.noSuchMethod(
      Invocation.method(#fetchAllPosts, []),
      returnValue: Future.value(<_i6.Post>[])) as _i3.Future<List<_i6.Post>>);
  @override
  _i3.Future<String> getBearerToken() =>
      (super.noSuchMethod(Invocation.method(#getBearerToken, []),
          returnValue: Future.value('')) as _i3.Future<String>);
}

/// A class which mocks [TwitterLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock
    implements _i7.TwitterLocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> cacheAllPosts(List<_i6.Post>? posts) =>
      (super.noSuchMethod(Invocation.method(#cacheAllPosts, [posts]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i3.Future<void>);
  @override
  _i3.Future<List<_i6.Post>> fetchAllPosts() => (super.noSuchMethod(
      Invocation.method(#fetchAllPosts, []),
      returnValue: Future.value(<_i6.Post>[])) as _i3.Future<List<_i6.Post>>);
}
