// Mocks generated by Mockito 5.0.3 from annotations
// in minitel_toolbox/test/data/repositories/diagnosis_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:connectivity_platform_interface/src/enums.dart' as _i5;
import 'package:minitel_toolbox/core/network/network_info.dart' as _i3;
import 'package:minitel_toolbox/data/database/diagnosis.dart' as _i2;
import 'package:minitel_toolbox/data/datasources/diagnosis/diagnosis_data_source.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeDiagnosis extends _i1.Fake implements _i2.Diagnosis {}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.ConnectivityResult> get result =>
      (super.noSuchMethod(Invocation.getter(#result),
              returnValue: Future.value(_i5.ConnectivityResult.wifi))
          as _i4.Future<_i5.ConnectivityResult>);
}

/// A class which mocks [DiagnosisDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i6.DiagnosisDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Diagnosis get diagnosis =>
      (super.noSuchMethod(Invocation.getter(#diagnosis),
          returnValue: _FakeDiagnosis()) as _i2.Diagnosis);
  @override
  _i2.Diagnosis diagnose({Duration? timeLimit = const Duration(minutes: 1)}) =>
      (super.noSuchMethod(
          Invocation.method(#diagnose, [], {#timeLimit: timeLimit}),
          returnValue: _FakeDiagnosis()) as _i2.Diagnosis);
}
