// Mocks generated by Mockito 5.0.3 from annotations
// in minitel_toolbox/test/data/repositories/releases_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:connectivity_platform_interface/src/enums.dart' as _i5;
import 'package:minitel_toolbox/core/network/network_info.dart' as _i3;
import 'package:minitel_toolbox/data/datasources/github/github_local_data_source.dart'
    as _i8;
import 'package:minitel_toolbox/data/datasources/github/github_remote_data_source.dart'
    as _i6;
import 'package:minitel_toolbox/domain/entities/github/release.dart' as _i7;
import 'package:minitel_toolbox/domain/entities/github/user.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _Fake$GithubUserCopyWith<$Res> extends _i1.Fake
    implements _i2.$GithubUserCopyWith<$Res> {}

class _FakeDuration extends _i1.Fake implements Duration {}

class _FakeDateTime extends _i1.Fake implements DateTime {}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i3.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.ConnectivityResult> get result =>
      (super.noSuchMethod(Invocation.getter(#result),
              returnValue: Future.value(_i5.ConnectivityResult.wifi))
          as _i4.Future<_i5.ConnectivityResult>);
}

/// A class which mocks [GithubUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubUser extends _i1.Mock implements _i2.GithubUser {
  MockGithubUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.$GithubUserCopyWith<_i2.GithubUser> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$GithubUserCopyWith<_i2.GithubUser>())
          as _i2.$GithubUserCopyWith<_i2.GithubUser>);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [DateTime].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateTime extends _i1.Mock implements DateTime {
  MockDateTime() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isUtc =>
      (super.noSuchMethod(Invocation.getter(#isUtc), returnValue: false)
          as bool);
  @override
  int get hashCode =>
      (super.noSuchMethod(Invocation.getter(#hashCode), returnValue: 0) as int);
  @override
  int get millisecondsSinceEpoch =>
      (super.noSuchMethod(Invocation.getter(#millisecondsSinceEpoch),
          returnValue: 0) as int);
  @override
  int get microsecondsSinceEpoch =>
      (super.noSuchMethod(Invocation.getter(#microsecondsSinceEpoch),
          returnValue: 0) as int);
  @override
  String get timeZoneName =>
      (super.noSuchMethod(Invocation.getter(#timeZoneName), returnValue: '')
          as String);
  @override
  Duration get timeZoneOffset =>
      (super.noSuchMethod(Invocation.getter(#timeZoneOffset),
          returnValue: _FakeDuration()) as Duration);
  @override
  int get year =>
      (super.noSuchMethod(Invocation.getter(#year), returnValue: 0) as int);
  @override
  int get month =>
      (super.noSuchMethod(Invocation.getter(#month), returnValue: 0) as int);
  @override
  int get day =>
      (super.noSuchMethod(Invocation.getter(#day), returnValue: 0) as int);
  @override
  int get hour =>
      (super.noSuchMethod(Invocation.getter(#hour), returnValue: 0) as int);
  @override
  int get minute =>
      (super.noSuchMethod(Invocation.getter(#minute), returnValue: 0) as int);
  @override
  int get second =>
      (super.noSuchMethod(Invocation.getter(#second), returnValue: 0) as int);
  @override
  int get millisecond =>
      (super.noSuchMethod(Invocation.getter(#millisecond), returnValue: 0)
          as int);
  @override
  int get microsecond =>
      (super.noSuchMethod(Invocation.getter(#microsecond), returnValue: 0)
          as int);
  @override
  int get weekday =>
      (super.noSuchMethod(Invocation.getter(#weekday), returnValue: 0) as int);
  @override
  bool operator ==(Object? other) =>
      (super.noSuchMethod(Invocation.method(#==, [other]), returnValue: false)
          as bool);
  @override
  bool isBefore(DateTime? other) =>
      (super.noSuchMethod(Invocation.method(#isBefore, [other]),
          returnValue: false) as bool);
  @override
  bool isAfter(DateTime? other) =>
      (super.noSuchMethod(Invocation.method(#isAfter, [other]),
          returnValue: false) as bool);
  @override
  bool isAtSameMomentAs(DateTime? other) =>
      (super.noSuchMethod(Invocation.method(#isAtSameMomentAs, [other]),
          returnValue: false) as bool);
  @override
  int compareTo(DateTime? other) => (super
          .noSuchMethod(Invocation.method(#compareTo, [other]), returnValue: 0)
      as int);
  @override
  DateTime toLocal() => (super.noSuchMethod(Invocation.method(#toLocal, []),
      returnValue: _FakeDateTime()) as DateTime);
  @override
  DateTime toUtc() => (super.noSuchMethod(Invocation.method(#toUtc, []),
      returnValue: _FakeDateTime()) as DateTime);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
  @override
  String toIso8601String() =>
      (super.noSuchMethod(Invocation.method(#toIso8601String, []),
          returnValue: '') as String);
  @override
  DateTime add(Duration? duration) =>
      (super.noSuchMethod(Invocation.method(#add, [duration]),
          returnValue: _FakeDateTime()) as DateTime);
  @override
  DateTime subtract(Duration? duration) =>
      (super.noSuchMethod(Invocation.method(#subtract, [duration]),
          returnValue: _FakeDateTime()) as DateTime);
  @override
  Duration difference(DateTime? other) =>
      (super.noSuchMethod(Invocation.method(#difference, [other]),
          returnValue: _FakeDuration()) as Duration);
}

/// A class which mocks [GithubRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock
    implements _i6.GithubRemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.GithubRelease>> fetchReleases(String? repo) =>
      (super.noSuchMethod(Invocation.method(#fetchReleases, [repo]),
              returnValue: Future.value(<_i7.GithubRelease>[]))
          as _i4.Future<List<_i7.GithubRelease>>);
}

/// A class which mocks [GithubLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock
    implements _i8.GithubLocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> cacheReleases(List<_i7.GithubRelease>? releasesToCache) =>
      (super.noSuchMethod(Invocation.method(#cacheReleases, [releasesToCache]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i7.GithubRelease>> fetchLastReleases() =>
      (super.noSuchMethod(Invocation.method(#fetchLastReleases, []),
              returnValue: Future.value(<_i7.GithubRelease>[]))
          as _i4.Future<List<_i7.GithubRelease>>);
}
