// Mocks generated by Mockito 5.0.3 from annotations
// in minitel_toolbox/test/data/datasources/github/github_local_data_source_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:io' as _i2;

import 'package:minitel_toolbox/core/files/file_manager.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeDirectory extends _i1.Fake implements _i2.Directory {}

class _FakeFile extends _i1.Fake implements _i2.File {}

/// A class which mocks [FileManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileManager extends _i1.Mock implements _i3.FileManager {
  MockFileManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Directory> get appDirectory =>
      (super.noSuchMethod(Invocation.getter(#appDirectory),
              returnValue: Future.value(_FakeDirectory()))
          as _i4.Future<_i2.Directory>);
  @override
  _i4.Future<_i2.File> get feedFile =>
      (super.noSuchMethod(Invocation.getter(#feedFile),
          returnValue: Future.value(_FakeFile())) as _i4.Future<_i2.File>);
  @override
  _i4.Future<_i2.File> get icalendarFile =>
      (super.noSuchMethod(Invocation.getter(#icalendarFile),
          returnValue: Future.value(_FakeFile())) as _i4.Future<_i2.File>);
  @override
  _i4.Future<_i2.File> get releasesFile =>
      (super.noSuchMethod(Invocation.getter(#releasesFile),
          returnValue: Future.value(_FakeFile())) as _i4.Future<_i2.File>);
}
