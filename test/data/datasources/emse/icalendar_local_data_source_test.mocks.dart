// Mocks generated by Mockito 5.0.3 from annotations
// in minitel_toolbox/test/data/datasources/emse/icalendar_local_data_source_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:convert' as _i3;
import 'dart:io' as _i2;

import 'package:minitel_toolbox/core/files/file_manager.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeDirectory extends _i1.Fake implements _i2.Directory {}

class _FakeFile extends _i1.Fake implements _i2.File {}

class _FakeEncoding extends _i1.Fake implements _i3.Encoding {}

/// A class which mocks [FileManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileManager extends _i1.Mock implements _i4.FileManager {
  MockFileManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Directory> get appDirectory =>
      (super.noSuchMethod(Invocation.getter(#appDirectory),
              returnValue: Future.value(_FakeDirectory()))
          as _i5.Future<_i2.Directory>);
  @override
  _i5.Future<_i2.File> get feedFile =>
      (super.noSuchMethod(Invocation.getter(#feedFile),
          returnValue: Future.value(_FakeFile())) as _i5.Future<_i2.File>);
  @override
  _i5.Future<_i2.File> get icalendarFile =>
      (super.noSuchMethod(Invocation.getter(#icalendarFile),
          returnValue: Future.value(_FakeFile())) as _i5.Future<_i2.File>);
  @override
  _i5.Future<_i2.File> get releasesFile =>
      (super.noSuchMethod(Invocation.getter(#releasesFile),
          returnValue: Future.value(_FakeFile())) as _i5.Future<_i2.File>);
}

/// A class which mocks [IOSink].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOSink extends _i1.Mock implements _i2.IOSink {
  MockIOSink() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Encoding get encoding => (super.noSuchMethod(Invocation.getter(#encoding),
      returnValue: _FakeEncoding()) as _i3.Encoding);
  @override
  set encoding(_i3.Encoding? _encoding) =>
      super.noSuchMethod(Invocation.setter(#encoding, _encoding),
          returnValueForMissingStub: null);
  @override
  _i5.Future<dynamic> get done => (super.noSuchMethod(Invocation.getter(#done),
      returnValue: Future.value(null)) as _i5.Future<dynamic>);
  @override
  void add(List<int>? data) =>
      super.noSuchMethod(Invocation.method(#add, [data]),
          returnValueForMissingStub: null);
  @override
  void writeAll(Iterable<dynamic>? objects, [String? separator = r'']) =>
      super.noSuchMethod(Invocation.method(#writeAll, [objects, separator]),
          returnValueForMissingStub: null);
  @override
  void writeCharCode(int? charCode) =>
      super.noSuchMethod(Invocation.method(#writeCharCode, [charCode]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<dynamic> addStream(_i5.Stream<List<int>>? stream) =>
      (super.noSuchMethod(Invocation.method(#addStream, [stream]),
          returnValue: Future.value(null)) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> flush() =>
      (super.noSuchMethod(Invocation.method(#flush, []),
          returnValue: Future.value(null)) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
          returnValue: Future.value(null)) as _i5.Future<dynamic>);
}
